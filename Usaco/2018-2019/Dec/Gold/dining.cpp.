#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
 
using namespace std;
using namespace __gnu_pbds;
 
typedef long long ll;
typedef long double ldb;
 
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<ldb,ldb> pdd;

#define ff(i,a,b) for(int i = a; i <= b; i++)
#define fb(i,b,a) for(int i = b; i >= a; i--)
#define trav(a,x) for (auto& a : x)
 
#define sz(a) (int)(a).size()
#define fi first
#define se second
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

// os.order_of_key(k) the number of elements in the os less than k
// *os.find_by_order(k)  print the k-th smallest number in os(0-based)

const int mod = 1000000007;
const ll inf = 1e18 + 5;
const int mxN = 200005; 

int n, m, k;

vector<pii> g[mxN];

ll dist[mxN];
ll d[mxN];

ll mx[mxN];

int main() {
    cin.tie(0)->sync_with_stdio(0);

    ifstream cin("dining.in");
    ofstream cout("dining.out");

    cin >> n >> m >> k;
    ff(i,1,m){
        int u, v, w;
        cin >> u >> v >> w;
        g[u].pb({v, w});
        g[v].pb({u, w});
    }

    ff(i,1,k){
        int X, Y;
        cin >> X >> Y;
        mx[X] = max(mx[X], (ll)Y);
    }

    ff(i,1,n)dist[i] = inf;
    priority_queue<pll, vector<pll>, greater<pll>> pq; pq.push({dist[n] = 0, n});

    while(sz(pq)){
        pll v = pq.top(); pq.pop();
        if(dist[v.se] < v.fi)continue;
        for(auto c : g[v.se]){
            int u = c.fi;
            int w = c.se;
            if(dist[u] > w + v.fi){
                pq.push({dist[u] = w + v.fi, u});
            }
        }
    }


    ff(i,1,n){
        if(mx[i] != 0)pq.push({d[i] = dist[i] - mx[i], i});
        else d[i] = inf;
    }

    while(sz(pq)){
        pll v = pq.top(); pq.pop();
        if(d[v.se] < v.fi)continue;
        for(auto c : g[v.se]){
            int u = c.fi;
            int w = c.se;
            if(d[u] > w + v.fi){
                pq.push({d[u] = w + v.fi, u});
            }
        }
    }

    ff(i,1,n - 1)cout << (dist[i] >= d[i] ? 1 : 0) << '\n';

    return 0;
}
/*



// probati bojenje sahovski
*/
 
 
 
 
 
